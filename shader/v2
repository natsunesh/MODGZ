// shaders/tv_noise.sksl
uniform shader iChunk;
uniform float2 iChunkSize;
uniform float iTick;

// Генератор шума (адаптированная версия snoise)
float mod289(float x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
float2 mod289(float2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
float3 permute(float3 x) { return mod289(((x*34.0)+1.0)*x); }

float snoise(float2 v) {
  const float4 C = float4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
  
  // First corner
  float2 i = floor(v + dot(v, C.yy));
  float2 x0 = v - i + dot(i, C.xx);

  // Other corners
  float2 i1 = (x0.x > x0.y) ? float2(1.0, 0.0) : float2(0.0, 1.0);
  float4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

  // Permutations
  i = mod289(i);
  float3 p = permute(permute(i.y + float3(0.0, i1.y, 1.0)) + i.x + float3(0.0, i1.x, 1.0));

  float3 m = max(0.5 - float3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m;
  m = m*m;

  // Gradients
  float3 x = 2.0 * fract(p * C.www) - 1.0;
  float3 h = abs(x) - 0.5;
  float3 ox = floor(x + 0.5);
  float3 a0 = x - ox;

  // Normalise gradients
  m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h*h);

  // Compute final noise
  float3 g;
  g.x = a0.x * x0.x + h.x * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

float rand(float2 co) {
  return fract(sin(dot(co.xy, float2(12.9898,78.233))) * 43758.5453);
}

half4 main(float2 xy) {
  float2 uv = xy / iChunkSize;
  float time = iTick * 2.0;

  // Шумовые волны
  float noise = max(0.0, snoise(float2(time, uv.y * 0.3)) - 0.3) * (1.0 / 0.7);
  noise += (snoise(float2(time*10.0, uv.y * 2.4)) - 0.5) * 0.15;

  // Смещение координат
  float xpos = uv.x - noise * noise * 0.25;
  half4 color = iChunk.eval(float2(xpos * iChunkSize.x, xy.y));

  // Интерференция
  color.rgb = mix(color.rgb, half3(rand(float2(uv.y * time)), 0, 0), noise * 0.3).rgb;

  // Паттерн линий
  if (floor(fmod(xy.y * 0.25, 2.0)) == 0.0) {
    color.rgb *= 1.0 - (0.15 * noise);
  }

  // Смещение цветовых каналов
  color.g = mix(color.r, iChunk.eval(float2((xpos + noise * 0.05) * iChunkSize.x, xy.y)).g, 0.25);
  color.b = mix(color.r, iChunk.eval(float2((xpos - noise * 0.05) * iChunkSize.x, xy.y)).b, 0.25);

  return color;
}
