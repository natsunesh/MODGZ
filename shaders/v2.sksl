precision mediump float;
uniform float iTime;
uniform vec2 iResolution;
uniform sampler2D iChannel0;

vec3 mod289(vec3 x) { 
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
    return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v) {
    const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
    vec2 i = floor(v + dot(v, C.yy));
    vec2 x0 = v - i + dot(i, C.xx);
    vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;
    i = mod289(i);
    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));
    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);
    m = m * m;
    m = m * m;
    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;
    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
    vec3 g;
    g.x = a0.x * x0.x + h.x * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}

float rand(vec2 co) {
    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

void main() {
    vec2 fragCoord = gl_FragCoord.xy;
    vec2 uv = fragCoord.xy / iResolution.xy;
    float time = iTime * 0.7;

    // Эффект переключения каналов (более редкий)
    if (mod(iTime, 8.0) < 0.2) {
        gl_FragColor = vec4(
            rand(uv * iTime * 1.5),
            rand(uv * iTime + 0.7),
            rand(uv * iTime + 2.0),
            1.0
        );
        return;
    }

    // Сильное дрожание сигнала
    vec2 jitter = vec2(rand(vec2(time)) - 0.5, rand(vec2(time + 0.3)) - 0.5) * 0.01;
    uv += jitter * (0.8 + sin(time * 5.0) * 0.2);

    // Агрессивные шумовые волны
    float noise = max(0.0, snoise(vec2(time * 1.5, uv.y * 0.5)) - 0.4) * (1.0 / 0.5);
    noise += (snoise(vec2(time * 15.0, uv.y * 3.0)) - 0.5) * 0.25;

    // Хаотичные радиопомехи
    float radio_distortion = sin(uv.y * 300.0 + time * 15.0) * 0.15;
    float xpos = clamp(uv.x - noise * noise * 0.35 + radio_distortion, 0.001, 0.999);

    // Основной цвет с глубокими тенями
    vec4 texColor = texture2D(iChannel0, vec2(xpos, uv.y));
    
    // Динамические сканирующие линии
    float scan_line = sin(uv.y * 180.0 + time * 8.0) * 0.4 + 0.6;
    texColor.rgb *= mix(scan_line, 1.0, smoothstep(0.7, 1.0, noise));

    // Цветовое расслоение с переменным смещением
    float chroma_offset = 0.03 * noise + sin(time * 2.0) * 0.01;
    vec3 channels;
    channels.r = texColor.r;
    channels.g = texture2D(iChannel0, vec2(xpos + chroma_offset, uv.y)).g;
    channels.b = texture2D(iChannel0, vec2(xpos - chroma_offset, uv.y)).b;

    // Винтажный эффект с зелёным оттенком
    vec3 vintage = channels * vec3(0.8, 1.0, 0.7);
    float grain = rand(uv * time * 2.0) * 0.2;
    gl_FragColor = vec4(mix(vintage, channels, 0.6) + grain, 1.0);
}
